package com.test;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map.Entry;
import java.util.Set;
import java.util.TreeSet;

public class LyricAnalyser {
	public static void add(HashMap<String, ArrayList<Integer>> map, String lyricWord, int wordPosition) {
		if (map.containsKey(lyricWord)) {
			map.get(lyricWord).add(wordPosition);
		} else {
			ArrayList<Integer> temp = new ArrayList<>();
			temp.add(wordPosition);
			map.put(lyricWord, temp);
		}
	}

	public static void displayWords(HashMap<String, ArrayList<Integer>> map) {
		Set<String> sortedWords = new TreeSet<>();
		sortedWords.addAll(map.keySet());

		for (String s : sortedWords) {
			String list = Arrays.toString(map.get(s).toArray()).replace("[", "").replace("]", "");
			System.out.print("\n" + s + ": " + list);
		}

	}
	
	public static void displayLyricsNew(HashMap<String,ArrayList<Integer>> map) {
		int count = 0;
		Set<Entry<String,ArrayList<Integer>>> entrySet = map.entrySet();
		for (Entry <String,ArrayList<Integer>> entry : entrySet) {
			count += entry.getValue().size();
		}
		String [] lyrics = new String[++count];
		for (Entry <String,ArrayList<Integer>> entry : entrySet) {
			for (int i: entry.getValue()) {
				if(i < 0) {
					lyrics[(-1 * i)] = entry.getKey() + "\n";
					continue;
				}
				lyrics[i] = entry.getKey() + " ";
			}
		}
		for (String s : lyrics) {
			System.out.print(s);
		}
	}

	public static void displayLyrics(HashMap<String, ArrayList<Integer>> map) {

		int count = 0;

		for (String key : map.keySet()) { // calculating total words in lyrics

			count += map.get(key).size();
		}

		String[] lyrics = new String[++count]; // creating the string array to
												// store lyrics in order.

		for (int i = 0; i < lyrics.length; i++) {
			lyrics[i] = "";
		}

		for (String key : map.keySet()) { // adding lyrics to the lyrics array
											// from map
			for (int i : map.get(key)) {
				if (i < 0) {
					lyrics[(-1 * i)] = key + "\n";
					continue;
				}
				lyrics[i] = key + " ";
			}
		}

		for (String s : lyrics) { // p rinting lyrics
			System.out.print(s);
		}

	}

	public static int count(HashMap<String, ArrayList<Integer>> map) {

		return map.size();
	}

	public static String mostFrequentWord(HashMap<String, ArrayList<Integer>> map) {

		String s = "";
		int temp = 0;

		for (String key : map.keySet()) {

			if (map.get(key).size() > temp) {
				s = key;
				temp = map.get(key).size();

			} else if (map.get(key).size() == temp) {
				if (s.compareTo(key) > 0) {
					s = key;
				}
			}

		}

		return s;
	}

	
	public static String mostFreqWord(HashMap<String, ArrayList<Integer>> map) {
		String mostRepeatedWord = null;
		int count = 0;
		Set<Entry<String,ArrayList<Integer>>> entrySet = map.entrySet();
		for (Entry<String,ArrayList<Integer>> entry: entrySet) {
			if (entry.getValue().size() > count) {
				mostRepeatedWord = entry.getKey();
				count = entry.getValue().size();
			}
		}
		return mostRepeatedWord;
	}
	
	public static void main(String[] args) throws IOException {
		HashMap<String, ArrayList<Integer>> map = new HashMap<String, ArrayList<Integer>>();
		int position = 1; // word position index start from 1

		String pathname = "C:\\Users\\Sri\\Downloads\\Lyrics\\test3.txt";
		File f = new File(pathname);
		BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(f)));
		String line = "";
		while (true) {
			line = br.readLine();
			if (line == null || line.length() == 0) {
				break;
			}
			String[] arr = line.trim().split(" ");
			for (int i = 0; i < arr.length; i++) {
				if (i != arr.length - 1) {
					add(map, arr[i].toUpperCase(), position++);
				} else {
					add(map, arr[i].toUpperCase(), (-1) * position);
					position++;
				}
			}
		}
		br.close();

		displayLyrics(map);
		displayWords(map);
		System.out.println();
		System.out.println("The number of unique words in the lyric is: " + count(map));
		System.out.println();
		System.out.println("Most frequent word: " + mostFrequentWord(map));
		System.out.println("word is - > " +mostFreqWord(map));
		
		
	}

}

